package consumer

import (
  "KafkaTask/api/middlewares"
  "KafkaTask/api/model"
  "context"
  "database/sql"
  "encoding/json"
  "fmt"
  "log"
  "os"
  "os/signal"
  "strings"
  "sync"
  "syscall"

  "github.com/Shopify/sarama"
)

const tableContactCreation = "CREATE TABLE IF NOT EXISTS contacts(id SERIAL, firstname TEXT NOT NULL, lastname TEXT NOT NULL, phone VARCHAR(13), email text, position text)"

var DB *sql.DB

const topics = "create"

func ConnectConsumer(brockersUrl []string, group string) (sarama.ConsumerGroup, error) {
  sarama.Logger = log.New(os.Stdout, "[sarama_consumer] ", log.LstdFlags)

  config := sarama.NewConfig()
  config.Consumer.Return.Errors = true

  conn, err := sarama.NewConsumerGroup(brockersUrl, group, config)

  if err != nil {
    return nil, fmt.Errorf("Failed to ping connection to kafka: %s", err.Error())
  }
  return conn, nil
}

func ConsumeData() {
  brokersUrl := []string{"localhost:9092"}

  group := "contact"
  consumer := Consumer{
    ready: make(chan bool),
  }
  ctx, cancel := context.WithCancel(context.Background())
  fmt.Println(cancel)
  client, err := ConnectConsumer(brokersUrl, group)
  if err != nil {
    panic(err)
  }
  wg := &sync.WaitGroup{}
  wg.Add(1)
  go func() {
    defer wg.Done()
    for {
      if err := client.Consume(ctx, strings.Split(topics, ","), &consumer); err != nil {
        log.Panicf("Error from consumer: %v", err)
      }
      if ctx.Err() != nil {
        return
      }
      consumer.ready = make(chan bool)
    }
  }()
  <-consumer.ready
  log.Println("Sararama consumer up ")

  sigterm := make(chan os.Signal, 1)
  signal.Notify(sigterm, syscall.SIGINT, syscall.SIGTERM)
  select {
  case <-ctx.Done():
    log.Println("terminating: context cancelled")
  case <-sigterm:
    log.Println("terminating: via signal")
  }
  cancel()
  wg.Wait()
  if err = client.Close(); err != nil {
    log.Panicf("Error closing client: %v", err)
  }
}

type Consumer struct {
  ready chan bool
}

// Setup is run at the beginning of a new session, before ConsumeClaim
func (consumer *Consumer) Setup(sarama.ConsumerGroupSession) error {
  // Mark the consumer as ready
  close(consumer.ready)
  return nil
}

// Cleanup is run at the end of a session, once all ConsumeClaim goroutines have exited
func (consumer *Consumer) Cleanup(sarama.ConsumerGroupSession) error {
  return nil
}

// ConsumeClaim must start a consumer loop of ConsumerGroupClaim's Messages().
func (consumer *Consumer) ConsumeClaim(session sarama.ConsumerGroupSession, claim sarama.ConsumerGroupClaim) error {
  var contact model.Contact
  // NOTE:
  // Do not move the code below to a goroutine.
  // The ConsumeClaim itself is called within a goroutine, see:
  // https://github.com/Shopify/sarama/blob/master/consumer_group.go#L27-L29
  for message := range claim.Messages() {
    log.Printf("Message claimed: value = %s, timestamp = %v, topic = %s", string(message.Value), message.Timestamp, message.Topic)
    session.MarkMessage(message, "")
    err := json.Unmarshal([]byte(message.Value), &contact)
    if err != nil {
      panic(err)
    }
    if message.Topic == "create" {
      middlewares.CreateContact(&contact)
    }
    if message.Topic == "update" {
      log.Println("we are in update")
      middlewares.UpdateContact(&contact, contact.ID)
    }

  }

  return nil

}